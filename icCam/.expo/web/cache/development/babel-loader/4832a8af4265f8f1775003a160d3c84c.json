{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useEffect, useState } from 'react';\nimport { sortDevices } from \"../utils/FormatFilter\";\nimport { Camera } from \"../Camera\";\nimport { parsePhysicalDeviceTypes } from \"../CameraDevice\";\nvar DefaultCameraDevices = {\n  back: undefined,\n  external: undefined,\n  front: undefined,\n  unspecified: undefined\n};\nexport function useCameraDevices(deviceType) {\n  var _useState = useState(DefaultCameraDevices),\n    _useState2 = _slicedToArray(_useState, 2),\n    cameraDevices = _useState2[0],\n    setCameraDevices = _useState2[1];\n  useEffect(function () {\n    var isMounted = true;\n    var loadDevice = function () {\n      var _ref = _asyncToGenerator(function* () {\n        var devices = yield Camera.getAvailableCameraDevices();\n        if (!isMounted) return;\n        devices = devices.sort(sortDevices);\n        if (deviceType != null) {\n          devices = devices.filter(function (d) {\n            var parsedType = parsePhysicalDeviceTypes(d.devices);\n            return parsedType === deviceType;\n          });\n        }\n        setCameraDevices({\n          back: devices.find(function (d) {\n            return d.position === 'back';\n          }),\n          external: devices.find(function (d) {\n            return d.position === 'external';\n          }),\n          front: devices.find(function (d) {\n            return d.position === 'front';\n          }),\n          unspecified: devices.find(function (d) {\n            return d.position === 'unspecified';\n          })\n        });\n      });\n      return function loadDevice() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n    loadDevice();\n    return function () {\n      isMounted = false;\n    };\n  }, [deviceType]);\n  return cameraDevices;\n}","map":{"version":3,"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAEA,SAASC,WAAT;AACA,SAASC,MAAT;AACA,SAAgDC,wBAAhD;AAKA,IAAMC,oBAAmC,GAAG;EAC1CC,IAAI,EAAEC,SADoC;EAE1CC,QAAQ,EAAED,SAFgC;EAG1CE,KAAK,EAAEF,SAHmC;EAI1CG,WAAW,EAAEH;AAJ6B,CAA5C;AAoCA,OAAO,SAASI,gBAAT,CAA0BC,UAA1B,EAA0G;EAC/G,gBAA0CX,QAAQ,CAAgBI,oBAAhB,CAAlD;IAAA;IAAOQ,aAAD;IAAgBC,gBAAhB;EAENd,SAAS,CAAC,YAAM;IACd,IAAIe,SAAS,GAAG,IAAhB;IAEA,IAAMC,UAAU;MAAA,6BAAG,aAA2B;QAC5C,IAAIC,OAAO,SAASd,MAAM,CAACe,yBAAP,EAApB;QACA,IAAI,CAACH,SAAL,EAAgB;QAEhBE,OAAO,GAAGA,OAAO,CAACE,IAAR,CAAajB,WAAb,CAAV;QACA,IAAIU,UAAU,IAAI,IAAlB,EAAwB;UACtBK,OAAO,GAAGA,OAAO,CAACG,MAAR,CAAgBC,WAAD,EAAO;YAC9B,IAAMC,UAAU,GAAGlB,wBAAwB,CAACiB,CAAC,CAACJ,OAAH,CAA3C;YACA,OAAOK,UAAU,KAAKV,UAAtB;UACD,CAHS,CAAV;QAID;QACDE,gBAAgB,CAAC;UACfR,IAAI,EAAEW,OAAO,CAACM,IAAR,CAAcF,WAAD;YAAA,OAAOA,CAAC,CAACG,QAAF,KAAe,MAAnC;UAAA,EADS;UAEfhB,QAAQ,EAAES,OAAO,CAACM,IAAR,CAAcF,WAAD;YAAA,OAAOA,CAAC,CAACG,QAAF,KAAe,UAAnC;UAAA,EAFK;UAGff,KAAK,EAAEQ,OAAO,CAACM,IAAR,CAAcF,WAAD;YAAA,OAAOA,CAAC,CAACG,QAAF,KAAe,OAAnC;UAAA,EAHQ;UAIfd,WAAW,EAAEO,OAAO,CAACM,IAAR,CAAcF,WAAD;YAAA,OAAOA,CAAC,CAACG,QAAF,KAAe,aAAnC;UAAA;QAJE,CAAD,CAAhB;MAMD,CAjBD;MAAA,gBAAMR,UAAU;QAAA;MAAA;IAAA,GAAhB;IAkBAA,UAAU;IAEV,OAAO,YAAM;MACXD,SAAS,GAAG,KAAZ;IACD,CAFD;EAGD,CA1BQ,EA0BN,CAACH,UAAD,CA1BM,CAAT;EA4BA,OAAOC,aAAP;AACD","names":["useEffect","useState","sortDevices","Camera","parsePhysicalDeviceTypes","DefaultCameraDevices","back","undefined","external","front","unspecified","useCameraDevices","deviceType","cameraDevices","setCameraDevices","isMounted","loadDevice","devices","getAvailableCameraDevices","sort","filter","d","parsedType","find","position"],"sources":["useCameraDevices.ts"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport type { CameraPosition } from '../CameraPosition';\nimport { sortDevices } from '../utils/FormatFilter';\nimport { Camera } from '../Camera';\nimport { CameraDevice, LogicalCameraDeviceType, parsePhysicalDeviceTypes, PhysicalCameraDeviceType } from '../CameraDevice';\n\nexport type CameraDevices = {\n  [key in CameraPosition]: CameraDevice | undefined;\n};\nconst DefaultCameraDevices: CameraDevices = {\n  back: undefined,\n  external: undefined,\n  front: undefined,\n  unspecified: undefined,\n};\n\n/**\n * Gets the best available {@linkcode CameraDevice}. Devices with more cameras are preferred.\n *\n * @returns The best matching {@linkcode CameraDevice}.\n * @throws {@linkcode CameraRuntimeError} if no device was found.\n * @example\n * ```tsx\n * const device = useCameraDevice()\n * // ...\n * return <Camera device={device} />\n * ```\n */\nexport function useCameraDevices(): CameraDevices;\n\n/**\n * Gets a {@linkcode CameraDevice} for the requested device type.\n *\n * @param {PhysicalCameraDeviceType | LogicalCameraDeviceType} deviceType Specifies a device type which will be used as a device filter.\n * @returns A {@linkcode CameraDevice} for the requested device type.\n * @throws {@linkcode CameraRuntimeError} if no device was found.\n * @example\n * ```tsx\n * const device = useCameraDevice('wide-angle-camera')\n * // ...\n * return <Camera device={device} />\n * ```\n */\nexport function useCameraDevices(deviceType: PhysicalCameraDeviceType | LogicalCameraDeviceType): CameraDevices;\n\nexport function useCameraDevices(deviceType?: PhysicalCameraDeviceType | LogicalCameraDeviceType): CameraDevices {\n  const [cameraDevices, setCameraDevices] = useState<CameraDevices>(DefaultCameraDevices);\n\n  useEffect(() => {\n    let isMounted = true;\n\n    const loadDevice = async (): Promise<void> => {\n      let devices = await Camera.getAvailableCameraDevices();\n      if (!isMounted) return;\n\n      devices = devices.sort(sortDevices);\n      if (deviceType != null) {\n        devices = devices.filter((d) => {\n          const parsedType = parsePhysicalDeviceTypes(d.devices);\n          return parsedType === deviceType;\n        });\n      }\n      setCameraDevices({\n        back: devices.find((d) => d.position === 'back'),\n        external: devices.find((d) => d.position === 'external'),\n        front: devices.find((d) => d.position === 'front'),\n        unspecified: devices.find((d) => d.position === 'unspecified'),\n      });\n    };\n    loadDevice();\n\n    return () => {\n      isMounted = false;\n    };\n  }, [deviceType]);\n\n  return cameraDevices;\n}\n"]},"metadata":{},"sourceType":"module"}