{"ast":null,"code":"import Dimensions from \"react-native-web/dist/exports/Dimensions\";\nexport var sortDevices = function sortDevices(left, right) {\n  var leftPoints = 0;\n  var rightPoints = 0;\n  var leftHasWideAngle = left.devices.includes('wide-angle-camera');\n  var rightHasWideAngle = right.devices.includes('wide-angle-camera');\n  if (leftHasWideAngle) leftPoints += 2;\n  if (rightHasWideAngle) rightPoints += 2;\n  var leftHasTelephoto = left.devices.includes('telephoto-camera');\n  var rightHasTelephoto = right.devices.includes('telephoto-camera');\n  if (leftHasTelephoto) leftPoints -= 2;\n  if (rightHasTelephoto) rightPoints -= 2;\n  if (left.devices.length > right.devices.length) leftPoints += 1;\n  if (right.devices.length > left.devices.length) rightPoints += 1;\n  return rightPoints - leftPoints;\n};\nvar SCREEN_SIZE = {\n  width: Dimensions.get('window').width,\n  height: Dimensions.get('window').height\n};\nvar SCREEN_ASPECT_RATIO = SCREEN_SIZE.width / SCREEN_SIZE.height;\nexport var sortFormats = function sortFormats(left, right) {\n  var leftPoints = 0,\n    rightPoints = 0;\n  leftPoints += Math.round(left.photoWidth / 500);\n  rightPoints += Math.round(right.photoWidth / 500);\n  leftPoints += Math.round(left.videoWidth / 500);\n  rightPoints += Math.round(right.videoWidth / 500);\n  var leftAspectRatioDiff = left.photoHeight / left.photoWidth - SCREEN_ASPECT_RATIO;\n  var rightAspectRatioDiff = right.photoHeight / right.photoWidth - SCREEN_ASPECT_RATIO;\n  leftPoints -= Math.abs(leftAspectRatioDiff) * 10;\n  rightPoints -= Math.abs(rightAspectRatioDiff) * 10;\n  return rightPoints - leftPoints;\n};\nexport var frameRateIncluded = function frameRateIncluded(range, fps) {\n  return fps >= range.minFrameRate && fps <= range.maxFrameRate;\n};","map":{"version":3,"mappings":";AAiBA,OAAO,IAAMA,WAAW,GAAG,SAAdA,WAAW,CAAIC,IAAD,EAAqBC,KAArB,EAAqD;EAC9E,IAAIC,UAAU,GAAG,CAAjB;EACA,IAAIC,WAAW,GAAG,CAAlB;EAEA,IAAMC,gBAAgB,GAAGJ,IAAI,CAACK,OAAL,CAAaC,QAAb,CAAsB,mBAAtB,CAAzB;EACA,IAAMC,iBAAiB,GAAGN,KAAK,CAACI,OAAN,CAAcC,QAAd,CAAuB,mBAAvB,CAA1B;EACA,IAAIF,gBAAJ,EAAsBF,UAAU,IAAI,CAAd;EACtB,IAAIK,iBAAJ,EAAuBJ,WAAW,IAAI,CAAf;EAGvB,IAAMK,gBAAgB,GAAGR,IAAI,CAACK,OAAL,CAAaC,QAAb,CAAsB,kBAAtB,CAAzB;EACA,IAAMG,iBAAiB,GAAGR,KAAK,CAACI,OAAN,CAAcC,QAAd,CAAuB,kBAAvB,CAA1B;EACA,IAAIE,gBAAJ,EAAsBN,UAAU,IAAI,CAAd;EACtB,IAAIO,iBAAJ,EAAuBN,WAAW,IAAI,CAAf;EAEvB,IAAIH,IAAI,CAACK,OAAL,CAAaK,MAAb,GAAsBT,KAAK,CAACI,OAAN,CAAcK,MAAxC,EAAgDR,UAAU,IAAI,CAAd;EAChD,IAAID,KAAK,CAACI,OAAN,CAAcK,MAAd,GAAuBV,IAAI,CAACK,OAAL,CAAaK,MAAxC,EAAgDP,WAAW,IAAI,CAAf;EAEhD,OAAOA,WAAW,GAAGD,UAArB;AACD,CAnBM;AAqBP,IAAMS,WAAW,GAAG;EAClBC,KAAK,EAAEC,UAAU,CAACC,GAAX,CAAe,QAAf,EAAyBF,KADd;EAElBG,MAAM,EAAEF,UAAU,CAACC,GAAX,CAAe,QAAf,EAAyBC;AAFf,CAApB;AAIA,IAAMC,mBAAmB,GAAGL,WAAW,CAACC,KAAZ,GAAoBD,WAAW,CAACI,MAA5D;AAOA,OAAO,IAAME,WAAW,GAAG,SAAdA,WAAW,CAAIjB,IAAD,EAA2BC,KAA3B,EAAiE;EAC1F,IAAIC,UAAU,GAAG,CAAjB;IACEC,WAAW,GAAG,CADhB;EAKAD,UAAU,IAAIgB,IAAI,CAACC,KAAL,CAAWnB,IAAI,CAACoB,UAAL,GAAkB,GAA7B,CAAd;EACAjB,WAAW,IAAIe,IAAI,CAACC,KAAL,CAAWlB,KAAK,CAACmB,UAAN,GAAmB,GAA9B,CAAf;EAEAlB,UAAU,IAAIgB,IAAI,CAACC,KAAL,CAAWnB,IAAI,CAACqB,UAAL,GAAkB,GAA7B,CAAd;EACAlB,WAAW,IAAIe,IAAI,CAACC,KAAL,CAAWlB,KAAK,CAACoB,UAAN,GAAmB,GAA9B,CAAf;EAKA,IAAMC,mBAAmB,GAAGtB,IAAI,CAACuB,WAAL,GAAmBvB,IAAI,CAACoB,UAAxB,GAAqCJ,mBAAjE;EACA,IAAMQ,oBAAoB,GAAGvB,KAAK,CAACsB,WAAN,GAAoBtB,KAAK,CAACmB,UAA1B,GAAuCJ,mBAApE;EACAd,UAAU,IAAIgB,IAAI,CAACO,GAAL,CAASH,mBAAT,IAAgC,EAA9C;EACAnB,WAAW,IAAIe,IAAI,CAACO,GAAL,CAASD,oBAAT,IAAiC,EAAhD;EAEA,OAAOrB,WAAW,GAAGD,UAArB;AACD,CArBM;AAmCP,OAAO,IAAMwB,iBAAiB,GAAG,SAApBA,iBAAiB,CAAIC,KAAD,EAAwBC,GAAxB;EAAA,OAAiDA,GAAG,IAAID,KAAK,CAACE,YAAb,IAA6BD,GAAG,IAAID,KAAK,CAACG,YAArH;AAAA","names":["sortDevices","left","right","leftPoints","rightPoints","leftHasWideAngle","devices","includes","rightHasWideAngle","leftHasTelephoto","rightHasTelephoto","length","SCREEN_SIZE","width","Dimensions","get","height","SCREEN_ASPECT_RATIO","sortFormats","Math","round","photoWidth","videoWidth","leftAspectRatioDiff","photoHeight","rightAspectRatioDiff","abs","frameRateIncluded","range","fps","minFrameRate","maxFrameRate"],"sources":["FormatFilter.ts"],"sourcesContent":["import { Dimensions } from 'react-native';\nimport type { CameraDevice, CameraDeviceFormat, FrameRateRange } from '../CameraDevice';\n\n/**\n * Compares two devices by the following criteria:\n * * `wide-angle-camera`s are ranked higher than others\n * * Devices with more physical cameras are ranked higher than ones with less. (e.g. \"Triple Camera\" > \"Wide-Angle Camera\")\n *\n * > Note that this makes the `sort()` function descending, so the first element (`[0]`) is the \"best\" device.\n *\n * @example\n * ```ts\n * const devices = camera.devices.sort(sortDevices)\n * const bestDevice = devices[0]\n * ```\n * @method\n */\nexport const sortDevices = (left: CameraDevice, right: CameraDevice): number => {\n  let leftPoints = 0;\n  let rightPoints = 0;\n\n  const leftHasWideAngle = left.devices.includes('wide-angle-camera');\n  const rightHasWideAngle = right.devices.includes('wide-angle-camera');\n  if (leftHasWideAngle) leftPoints += 2;\n  if (rightHasWideAngle) rightPoints += 2;\n\n  // telephoto cameras often have very poor quality.\n  const leftHasTelephoto = left.devices.includes('telephoto-camera');\n  const rightHasTelephoto = right.devices.includes('telephoto-camera');\n  if (leftHasTelephoto) leftPoints -= 2;\n  if (rightHasTelephoto) rightPoints -= 2;\n\n  if (left.devices.length > right.devices.length) leftPoints += 1;\n  if (right.devices.length > left.devices.length) rightPoints += 1;\n\n  return rightPoints - leftPoints;\n};\n\nconst SCREEN_SIZE = {\n  width: Dimensions.get('window').width,\n  height: Dimensions.get('window').height,\n};\nconst SCREEN_ASPECT_RATIO = SCREEN_SIZE.width / SCREEN_SIZE.height;\n\n/**\n * Sort formats by resolution and aspect ratio difference (to the Screen size).\n *\n * > Note that this makes the `sort()` function descending, so the first element (`[0]`) is the \"best\" device.\n */\nexport const sortFormats = (left: CameraDeviceFormat, right: CameraDeviceFormat): number => {\n  let leftPoints = 0,\n    rightPoints = 0;\n\n  // we downscale the points so much that we are in smaller number ranges for future calculations\n  // e.g. for 4k (4096), this adds 8 points.\n  leftPoints += Math.round(left.photoWidth / 500);\n  rightPoints += Math.round(right.photoWidth / 500);\n  // e.g. for 4k (4096), this adds 8 points.\n  leftPoints += Math.round(left.videoWidth / 500);\n  rightPoints += Math.round(right.videoWidth / 500);\n\n  // we downscale the points here as well, so if left has 16:9 and right has 21:9, this roughly\n  // adds 5 points. If the difference is smaller, e.g. 16:9 vs 17:9, this roughly adds a little\n  // bit over 1 point, just enough to overrule the FPS below.\n  const leftAspectRatioDiff = left.photoHeight / left.photoWidth - SCREEN_ASPECT_RATIO;\n  const rightAspectRatioDiff = right.photoHeight / right.photoWidth - SCREEN_ASPECT_RATIO;\n  leftPoints -= Math.abs(leftAspectRatioDiff) * 10;\n  rightPoints -= Math.abs(rightAspectRatioDiff) * 10;\n\n  return rightPoints - leftPoints;\n};\n\n/**\n * Returns `true` if the given Frame Rate Range (`range`) contains the given frame rate (`fps`)\n *\n * @param {FrameRateRange} range The range to check if the given `fps` are included in\n * @param {number} fps The FPS to check if the given `range` supports.\n * @example\n * ```ts\n * // get all formats that support 60 FPS\n * const formatsWithHighFps = useMemo(() => device.formats.filter((f) => f.frameRateRanges.some((r) => frameRateIncluded(r, 60))), [device.formats])\n * ```\n * @method\n */\nexport const frameRateIncluded = (range: FrameRateRange, fps: number): boolean => fps >= range.minFrameRate && fps <= range.maxFrameRate;\n"]},"metadata":{},"sourceType":"module"}